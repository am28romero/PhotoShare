@page "/folder/{FolderId:int}"
@using PhotoShare.Services
@inject MediaService MediaService
@inject FolderService FolderService
@inject NavigationManager Nav
@inject ILogger<FolderView> _logger
@rendermode InteractiveServer


<h3>Viewing Folder</h3>

@if (folder is null)
{
    <p>Folder not found or access denied.</p>
}
else
{
    <h4>@folder.Name</h4>
    <InputFile OnChange="HandleUpload" />
    <ul>
        @foreach (var file in media)
        {
            <li @key="file.Id">
                @file.FileName
                <button type="button" @onclick:stopPropagation="true" @onclick="() => DeleteFile(file)">delete</button>
            </li>
        }
    </ul>
}

@code {
    [Parameter] public int FolderId { get; set; }

    Folder? folder;
    List<MediaItem> media = [];

    protected override async Task OnInitializedAsync()
    {
        folder = await FolderService.GetFolderAsync(FolderId);
        if (folder != null)
        {
            media = await MediaService.ListMediaAsync(folder.Id);
        }
    }

    async Task HandleUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var stream = file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024);
        var formFile = new FormFile(stream, 0, file.Size, file.Name, file.Name)
        {
            Headers = new HeaderDictionary(),
            ContentType = file.ContentType
        };

        await MediaService.UploadFileAsync(formFile, FolderId);
        media = await MediaService.ListMediaAsync(FolderId);
    }

    async Task DeleteFile(MediaItem file)
    {
        int id = file.Id;
        Console.WriteLine($"Debugging file with ID: {id}");
        _logger.LogInformation($"Debugging file with ID: {id}");
        await MediaService.DeleteMediaAsync(id);
        media = await MediaService.ListMediaAsync(FolderId);
        StateHasChanged();
    }

    async Task Debug(int FileId)
    {
        Console.WriteLine($"Debugging file with ID: {FileId}");
        _logger.LogInformation($"Debugging file with ID: {FileId}");
        await Task.CompletedTask;
    }
}