@page "/myfolders"
@using PhotoShare.Services
@inject FolderService FolderService
@inject NavigationManager Nav
@inject ILogger<MyFolders> _logger
@rendermode InteractiveServer


<h3>My Folders</h3>

<input @bind="newFolderName" placeholder="New folder name" />
<select @bind="parentId">
    <option value="">[root]</option>
    @foreach (var f in folders)
    {
        <option value="@f.Id">@f.Name</option>
    }
</select>
<button @onclick="CreateFolder">Create Folder</button>

<ul>
    @foreach (var folder in folders.Where(f => f.ParentFolderId == null))
    {
        <li>
            <a @onclick="() => GoToFolder(folder.Id)">@folder.Name</a>
            @if (HasChildren(folder.Id))
            {
                <ul>
                    @foreach (var sub in folders.Where(f => f.ParentFolderId == folder.Id))
                    {
                        <li><a @onclick="() => GoToFolder(sub.Id)">@sub.Name</a></li>
                    }
                </ul>
            }
        </li>
    }
</ul>

@code {
    List<Folder> folders = [];
    string newFolderName = "";
    int? parentId = null;

    protected override async Task OnInitializedAsync()
    {
        _logger.LogInformation("Initializing MyFolders component.");
        folders = await FolderService.GetAccessibleFoldersAsync();
    }

    bool HasChildren(int id) => folders.Any(f => f.ParentFolderId == id);

    async Task CreateFolder()
    {
        _logger.LogInformation($"Creating folder '{newFolderName}' under parent ID '{parentId}'.");
        if (!string.IsNullOrWhiteSpace(newFolderName))
        {
            await FolderService.CreateFolderAsync(newFolderName, parentId);
            newFolderName = "";
            parentId = null;
            folders = await FolderService.GetAccessibleFoldersAsync();
        }
        else
        {
            _logger.LogWarning("Folder name is empty.");
        }
    }

    void GoToFolder(int id) => Nav.NavigateTo($"/folder/{id}");
}
